set encoding=utf8
scriptencoding utf-8
language C

" define variables and functions {{{1
let s:here = fnamemodify(resolve(expand('<sfile>:p')), ':h')
let s:base = substitute(s:here, 'vim', '.data', 'g')
let s:app  = has('nvim') ? 'nvim' : 'vim'
let g:dotfiles = substitute(s:here, 'vim', '', 'g')

fun! Dummy(...)
endfun

fun! IsPlugged(name)
    return exists('g:plugs') && has_key(g:plugs, a:name) && isdirectory(g:plugs[a:name].dir)
endfun

fun! Whereis(command)
    let cmd = has('win32') ? 'where ' : 'which '
    return executable(a:command)
        \ ? substitute(system(cmd.a:command), '\v[\r\n]*', '', 'g')
        \ : ""
endfun

fun! SafeSet(option, value)
    if has(a:option)
        exec 'set '.a:option."=".a:value
    endif
endfun
"}}}1

" install vim-plug {{{1
let s:vimplug = s:base.'/vim/autoload/plug.vim'
let s:plugins = s:base.'/'.s:app.'/plugged'

if empty(glob(s:vimplug)) && executable('git')
    " Install vim-plug
    let s:vimplug_url = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    if has('unix')
        exec 'silent !curl -fLo '.s:vimplug.' --create-dirs '.s:vimplug_url
    else
        " NOTE: following script is not working
    "     let s:vimplug_win = substitute(s:vimplug, '/', '\\', 'g')
    "     call mkdir(fnamemodify(s:vimplug_win, ':h'), 'p')
    "     let s:cmd = &shell
    "     set shell=powershell
    "     exec 'silent !(New-Object Net.WebClient).DownloadFile("'.s:vimplug_url
    "         \.'", $ExcutionContext.SessionState.Path.GetUnresolvedProviderPathFromPath("'
    "         \.s:vimplug_win
    "         \.'"))'
    "     exec 'set shell='.s:cmd
    endif
endif
" }}}1

" install plugins {{{1
if filereadable(s:vimplug)
    exec 'source '.s:vimplug
    call plug#begin(s:plugins)
    let g:vimproc#download_windows_dll = 1
    Plug 'Shougo/vimproc.vim', { 'do': 'make' }
        \ | Plug 'thinca/vim-quickrun'
    Plug 'joshdick/onedark.vim'
    Plug 'sheerun/vim-polyglot'
    Plug 'kana/vim-smartinput'
    Plug 'tpope/vim-endwise'
    Plug 'jiangmiao/auto-pairs'
    Plug 'junegunn/vim-easy-align'
    Plug 'kana/vim-operator-user'
    Plug 'rhysd/vim-operator-surround'
    Plug 'tomtom/tcomment_vim'
    Plug 'osyo-manga/vim-over'
    Plug 'airblade/vim-gitgutter'
    Plug 'tpope/vim-fugitive'
    Plug 'Yggdroot/indentLine'
    Plug 'mattn/emmet-vim', { 'for': ['css', 'html', 'markdown', 'svg', 'xml'] }
    Plug 'alvan/vim-closetag', { 'for': ['html', 'markdown', 'svg', 'xml'] }
    Plug 'tyru/eskk.vim'
    Plug 'simeji/winresizer'
    Plug 'cocopon/vaffle.vim'
    Plug 'ryanoasis/vim-devicons'
    if has('nvim')
        let g:python_host_prog  = Whereis('python2')
        let g:python3_host_prog = Whereis('python3')
        Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
        Plug 'chemzqm/denite-extra'
        Plug 'Shougo/neoyank.vim'
        Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
        Plug 'itchyny/lightline.vim'
        Plug 'w0rp/ale'
        Plug 'Chiel92/vim-autoformat'
        Plug 'maximbaz/lightline-ale'
        Plug 'autozimu/LanguageClient-neovim', {
            \ 'branch': 'next',
            \ 'do': has('unix')
            \     ? 'bash install.sh'
            \     : 'powershell -executionpolicy bypass -File install.ps1'
            \ }
        Plug 'zchee/deoplete-clang',              { 'for': 'cpp' }
        Plug 'dag/vim-fish',                      { 'for': 'fish' }
        Plug 'ponko2/deoplete-fish',              { 'for': 'fish' }
        Plug 'fatih/vim-go',                      { 'for': 'go', 'do': ':GoInstallBinaries' }
        Plug 'zchee/deoplete-go',                 { 'for': 'go' }
        Plug 'JuliaEditorSupport/deoplete-julia', { 'for': 'julia' }
        Plug 'baabelfish/nvim-nim',               { 'for': 'nim' }
        Plug 'zchee/deoplete-jedi',               { 'for': 'python' }
        Plug 'Shougo/neco-vim',                   { 'for': 'vim' }
        Plug 'Shougo/neco-syntax'
        Plug 'ujihisa/neco-look'
        Plug 'tyru/open-browser.vim', { 'for': ['markdown', 'adoc'], 'on': 'PrevimOpen' }
        Plug 'kannokanno/previm',     { 'for': ['markdown', 'adoc'], 'on': 'PrevimOpen' }
        Plug 'kassio/neoterm'
        Plug 'vimlab/split-term.vim'
        Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
    else
        Plug 'rhysd/wandbox-vim'
        Plug 'ctrlpvim/ctrlp.vim'
        Plug 'mattn/ctrlp-filer'
        Plug 'mattn/ctrlp-register'
        Plug 'thinca/vim-fontzoom'
    endif
    if has('unix') && has('python3')
        " TODO: Check github, and uncomment following command.
        " Plug 'nixprime/cpsm', { 'do': 'bash install.sh' }
    elseif has('unix')
        Plug 'fuenor/im_control.vim'
    endif
    call plug#end()

    " install plugins automatically on first run
    if empty(glob(s:plugins . '/?*'))
        au VimEnter *
            \   let g:plug_window = 'enew'
            \ | PlugInstall --sync | bd
            \ | source $MYVIMRC
            \ | let g:plug_window = 'vertical topleft new'
    endif
endif
"}}}1

" options {{{1
set modeline
set lazyredraw
set number
set relativenumber
set fenc=utf-8
set fileformats=unix,dos
set showcmd
set cursorline
set tabstop=4
set softtabstop=4
set expandtab
set breakindent
set shiftwidth=4
set hidden
set virtualedit=block
set whichwrap=b,s,h,l,<,>,[,],~
set backspace=indent,eol,start
set wrap
set display=lastline
set pumheight=10
set mouse=a
set wildmenu
set ignorecase
set smartcase
set clipboard=unnamedplus
set history=100
set list
set listchars=tab:)\ ,trail:-,eol:\ ,extends:>,precedes:<,nbsp:-
set splitright
set splitbelow
set hlsearch
set foldmethod=marker " set-foldtext will be defined by FoldTextCustom.
set nf=""
set autowrite
set nocompatible
set modeline
set laststatus=2
set showtabline=2
set iminsert=0
set imsearch=-1
set ambiwidth=double
set titlestring=%M%{has('nvim')?'nvim':(has('gui_running')?'gvim':'vim')}%{strlen(@%)?'\ \ :\ '.expand('%:p:~'):''}
set statusline=\ %M%n.%v.%l\ %{printf('')}\ %{exists('g:debug')&&g:debug==1?'color:'.synIDattr(synID(line('.'),col('.'),1),'name'):''}%=%{strlen(expand('%:f'))?expand('%:t'):'\ -\ '}\  
if has('nvim')
    set noshowmode
else
    set termwinkey=<A-w>
endif

let s:tmpdir = s:base.'/'.s:app.'/tmp'
if empty(glob(s:tmpdir))
    call mkdir(s:tmpdir, "p")
    call mkdir(s:tmpdir.'/backup')
    call mkdir(s:tmpdir.'/swap')
    call mkdir(s:tmpdir.'/undo')
endif
set backup
set undofile
exec 'set backupdir='.s:tmpdir.'/backup'
exec 'set directory='.s:tmpdir.'/swap'
exec 'set undodir='  .s:tmpdir.'/undo'
exec 'set viminfo+=n'.s:tmpdir.'/viminfo.txt'

if executable('fish')
    set shell=fish
    set shellpipe=|
endif
"}}}1

" keymaps {{{1
let g:mapleader = ","
nnoremap <Space><Space> :<C-u>pwd<CR>
" normal/visual mode > moving
noremap j         gj
noremap k         gk
noremap gj        j
noremap gk        k
noremap q         $
noremap t         <Nop>
noremap T         <Nop>
noremap <Up>      gk
noremap <Down>    gj
noremap <A-Up>    <C-b>
noremap <A-Down>  <C-f>
noremap <A-Left>  0
noremap <A-Right> $
noremap <C-Left>  b
noremap <C-Right> w
" normal/visual mode > cut/yank/paste
noremap x "_x
noremap X "_X
noremap s "_s
noremap S "_S
nnoremap Y y$
nnoremap <C-Up>   "zdd<Up>"zP
nnoremap <C-Down> "zdd"zp
vnoremap <C-Up>   "zdd<Up>"zP
vnoremap <C-Down> "zdd"zp
" normal/visual mode > window/buffer
nnoremap <Tab>       <C-w>w
nnoremap <C-l>       <C-w>w
nnoremap <S-Tab>     <C-w>W
nnoremap <BackSpace> <C-w>W
nnoremap <Delete>    <C-w>W
nnoremap <C-h>       <C-w>W
nnoremap <silent> <C-a> :<C-u>bn<CR>
nnoremap <silent> <C-x> :<C-u>bp<CR>
" normal/visual mode > other
nnoremap Q  q
noremap  +  <C-a>
noremap  -  <C-x>
vnoremap <  <gv
vnoremap >  >gv
nnoremap gl <C-l>
" in insert mode
inoremap jj <ESC>
inoremap <C-Backspace> <ESC>ciw
inoremap <C-Delete>    <Space><ESC>ciw
inoremap <PageUp>      <Home>
inoremap <PageDown>    <End>
" in command mode (emulate Emacs binding)
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-d> <Del>
" in terminal mode
tnoremap <S-Space> <Space>
"}}}1

" commands {{{1
" command to regist vim commands/functions output to "*
com! -nargs=* -complete=command Record
    \ redir @*
    \ | execute <q-args>
    \ | redir END

" reload vimrc/gvimrc
if !exists('g:loaded_reloader')
    fun! s:reload_vimrc()
        exec 'source '.s:here.'/vimrc'
        if filereadable(s:here.'/gvimrc') && (has('gui_running') || exists('g:GuiLoaded'))
            exec 'source '.s:here.'/gvimrc'
        endif
    endfun
    com! Reload call s:reload_vimrc()
    let g:loaded_reloader = 1
endif
"}}}1

" other settings unrelated to plugins {{{1
let g:vim_indent_cont = &tabstop

" keymap/command related dotfiles {{{2
if isdirectory(g:dotfiles)
    exec 'nnoremap <Space>. :<C-u>cd '.g:dotfiles.'<CR>'
    exec 'nnoremap t. :<C-u>Vexplore '.g:dotfiles.'<CR>'
endif
"}}}2

" custom tabline {{{2
fun! GitInfo()
    if IsPlugged('vim-fugitive') && exists('*fugitive#head')
        let l:branch = fugitive#head()
        return (l:branch == '') ? '' : 'Git:'.l:branch.' '
    else
        return ''
    endif
endfun

fun! ImeInfo()
    return ''
endfun

set tabline=\ %M%{tabpagenr()}.%n%{strlen(expand('%:f'))?'\ '.expand('%:t'):''}%=%{ImeInfo()}%{GitInfo()}%{&ff=='unix'?'':'CRLF\ '}%{&fenc==#'utf-8'?'':'Enc:'.&fenc.'\ '}%{strlen(&ft)?&ft:'plain'}:%L\  
"}}}2

" netrw settings to use like NERDTree {{{2
" let g:netrw_nogx = 1 " is defined on previm settings
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = -30
let g:Netrw_UserMaps = [
    \ ['<leftmouse>',   'Dummy'],
    \ ['<2-leftmouse>', 'Dummy'],
    \ ['<s-leftmouse>', 'Dummy'],
    \ ['<middlemouse>', 'Dummy'],
    \ ['<rightmouse>',  'Dummy'],
    \ ]
aug NetrwCommandKeymap
    au!
    au FileType netrw noremap <silent> <buffer> H  <F1>:h netrw-quickmap<CR>
    au FileType netrw noremap <silent> <buffer> qq :<C-u>bd<CR>
    au FileType netrw noremap <silent> <buffer> Q  :<C-u>bd<CR>
aug END
nnoremap tt :<C-u>Vexplore ./<CR>
nnoremap t~ :<C-u>Vexplore ~/<CR>
nnoremap TT :<C-u>Vexplore %:h/<CR>
"}}}2

" correlate some extentions to filetypes {{{2
aug ExtendExtentions
    au!
    " for markdown
    au BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set ft=markdown
    " for Nyagos script
    au BufNewfile,BufRead *.luash set ft=lua
    au BufNewfile,BufRead .nyagos set ft=lua
aug END
"}}}2

" apply vim-anyfold style foldtext method {{{2
fun! FoldTextCustom()
    let fs = v:foldstart
    while getline(fs) !~ '\w'
        let fs = nextnonblank(fs + 1)
    endwhile
    if fs > v:foldend
        let line = getline(v:foldstart)
    else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
    endif
    let line = substitute(line, '\v\{{3}(\d{1,})', '{\1}', 'g')
    let line = substitute(line, '\v\{{3}', '{...}', 'g')

    let w = winwidth(0) - &foldcolumn - &number * &numberwidth
    let foldSize = 1 + v:foldend - v:foldstart
    let foldSizeStr = " " . foldSize . " lines "
    let foldLevelStr = repeat("==", v:foldlevel)
    let lineCount = line("$")
    let expansionString = repeat(" ", w - strwidth(foldSizeStr.line.foldLevelStr) - 1)
    return line . expansionString . foldSizeStr . foldLevelStr
endfun
set foldtext=FoldTextCustom()
"}}}2

" rename terminal buffer name {{{2
fun! s:renameTermBuffer()
    if has('nvim') && exists('b:term_title') && exists('b:terminal_job_pid')
        execute ":keepalt file term" . "/" . b:term_title . '/ t' . b:terminal_job_pid
    endif
endfun
aug RenameTermBuffer
    au!
    au BufLeave * call s:renameTermBuffer()
aug END
"}}}2

" make 'terminal' filetype {{{2
fun! s:bufnew()
    if &buftype == "terminal" && &filetype == ""
        set filetype=terminal
    endif
endfun
aug FTTerminal
    au!
    au BufNew * call timer_start(0, { -> s:bufnew() })
aug END
"}}}2
"}}}1

" settings related to plugins {{{1

" IMEs {{{2
let g:skk_dict_path = has('win32') ? $HOME."/skk/" : '/usr/share/skk/'
let g:skk_dict = g:skk_dict_path.'SKK-JISYO.L'
if IsPlugged('eskk.vim') && filereadable(g:skk_dict)
    " eskk settings {{{3
    set imdisable
    nnoremap <silent> <C-\><C-\> :<C-u>call EskkIntelijentToggle()<CR>
    let g:eskk#initial_mode = 'hira'
    let g:eskk#large_dictionary = {
        \ 'path': g:skk_dict,
        \ 'sorted': 0,
        \ 'encoding': 'euc-jp'
        \}
    let g:eskk#statusline_mode_strings = {'hira':'','kata':'','ascii':'','hankata':'','abbrev':''}
    let g:eskk#marker_henkan = '>'
    let g:eskk#marker_henkan_select = '>>'
    let g:use_color_cursor = 1 " cursol_color is defined at COLOR-SCHEME block
    let IM_CtrlMode = 0
    if has('unix')
        silent call system('ibus engine "xkb:jp::jpn" >/dev/null 2>&1')
    endif
    fun! ImeInfo()
        if !exists('g:next_ime_mode')
            return ''
        elseif g:next_ime_mode == 1
            return 'eskk '
        elseif g:next_ime_mode == 2
            return 'eskk(Lock) '
        endif
        return ''
    endfun
    fun! EskkCustomMapping()
        let th = eskk#table#new('rom_to_hira*', 'rom_to_hira') " {{{4
        call th.add_map(';',    'ー')
        call th.add_map(':',    'っ')
        call th.add_map('z!',   '●')
        call th.add_map('z1',   '○')
        call th.add_map('z"',   '▼')
        call th.add_map('z2',   '▽')
        call th.add_map('z#',   '▲')
        call th.add_map('z3',   '△')
        call th.add_map('z$',   '■')
        call th.add_map('z4',   '□')
        call th.add_map('z%',   '◆')
        call th.add_map('z5',   '◇')
        call th.add_map('z&',   '★')
        call th.add_map('z6',   '☆')
        call th.add_map("z'",   '♪')
        call th.add_map('z7',   '◎')
        call th.add_map('z(',   '【')
        call th.add_map('z8',   '〔')
        call th.add_map('z)',   '】')
        call th.add_map('z9',   '〕')
        call th.add_map('z0',   '∞')
        call th.add_map('z=',   '≒')
        call th.add_map('z-',   '〜')
        call th.add_map('z~',   '≠')
        call th.add_map('z^',   '※')
        call th.add_map('z|',   '〒')
        call th.add_map('z\\',  '￥')
        call th.add_map('z`',   '〆')
        call th.add_map('z@',   '〃')
        call th.add_map('z+',   '±')
        call th.add_map('z;',   '゛')
        call th.add_map('z*',   '×')
        call th.add_map('z,',   '゜')
        call th.add_map('z<',   '＜')
        call th.add_map('z>',   '＞')
        call th.add_map('z?',   '÷')
        call th.add_map('z/',   '・')
        call th.add_map('z_',   '―')
        call th.add_map('z ',   '　')
        call th.add_map('zL',   '⇒')
        call th.add_map('xca',  'ゕ')
        call th.add_map('xce',  'ゖ')
        call th.add_map('xva',  'ヷ')
        call th.add_map('xvi',  'ヸ')
        call th.add_map('xvu',  'ゔ')
        call th.add_map('xve',  'ヹ')
        call th.add_map('xvo',  'ヺ')
        call th.add_map('xnga', 'か゚')
        call th.add_map('xngi', 'き゚')
        call th.add_map('xngu', 'く゚')
        call th.add_map('xnge', 'け')
        call th.add_map('xngo', 'こ゚')
        call th.add_map('!',    '!')
        call th.add_map('?',    '?')
        call th.add_map('j!',   '！')
        call th.add_map('j?',   '？')
        call eskk#register_mode_table('hira', th)
        " }}}4
        let tk = eskk#table#new('rom_to_kata*', 'rom_to_kata') " {{{4
        call th.add_map(';',    'ー')
        call th.add_map(':',    'ッ')
        call tk.add_map('z!',   '●')
        call tk.add_map('z1',   '○')
        call tk.add_map('z"',   '▼')
        call tk.add_map('z2',   '▽')
        call tk.add_map('z#',   '▲')
        call tk.add_map('z3',   '△')
        call tk.add_map('z$',   '■')
        call tk.add_map('z4',   '□')
        call tk.add_map('z%',   '◆')
        call tk.add_map('z5',   '◇')
        call tk.add_map('z&',   '★')
        call tk.add_map('z6',   '☆')
        call tk.add_map("z'",   '♪')
        call tk.add_map('z7',   '◎')
        call tk.add_map('z(',   '【')
        call tk.add_map('z8',   '〔')
        call tk.add_map('z)',   '】')
        call tk.add_map('z9',   '〕')
        call tk.add_map('z0',   '∞')
        call tk.add_map('z=',   '≒')
        call tk.add_map('z-',   '〜')
        call tk.add_map('z~',   '≠')
        call tk.add_map('z^',   '※')
        call tk.add_map('z|',   '〒')
        call tk.add_map('z\\',  '￥')
        call tk.add_map('z`',   '〆')
        call tk.add_map('z@',   '〃')
        call tk.add_map('z+',   '±')
        call tk.add_map('z;',   '゛')
        call tk.add_map('z*',   '×')
        call tk.add_map('z,',   '゜')
        call tk.add_map('z<',   '＜')
        call tk.add_map('z>',   '＞')
        call tk.add_map('z?',   '÷')
        call tk.add_map('z/',   '・')
        call tk.add_map('z_',   '―')
        call tk.add_map('z ',   '　')
        call tk.add_map('zL',   '⇒')
        call tk.add_map('xca',  'ヵ')
        call tk.add_map('xce',  'ヶ')
        call tk.add_map('xva',  'ヷ')
        call tk.add_map('xvi',  'ヸ')
        call tk.add_map('xvu',  'ヴ')
        call tk.add_map('xve',  'ヹ')
        call tk.add_map('xvo',  'ヺ')
        call tk.add_map('xnga', 'カ゚')
        call tk.add_map('xngi', 'キ゚')
        call tk.add_map('xngu', 'ク゚')
        call tk.add_map('xnge', 'ケ゚')
        call tk.add_map('xngo', 'コ゚')
        call tk.add_map('!',    '!')
        call tk.add_map('?',    '?')
        call tk.add_map('j!',   '！')
        call tk.add_map('j?',   '？')
        call eskk#register_mode_table('kata', tk)
        " }}}4
    endfun
    fun! EskkIntelijentToggle()
        let g:next_ime_mode = exists('g:next_ime_mode') ? (g:next_ime_mode + 1) % 3 : 1
        if g:next_ime_mode == 0
            call eskk#disable()
            set showtabline=2
        else
            call eskk#enable()
            set showtabline=2
        endif
    endfun
    fun! FixEskkStatus()
        if exists('g:next_ime_mode') && g:next_ime_mode == 2
            call eskk#enable()
        else
            let g:next_ime_mode = eskk#is_enabled() ? 1 : 0
        endif
        set showtabline=2
    endfun
    aug EskkHooks
        au!
        au User eskk-initialize-pre call EskkCustomMapping()
        au User eskk-disable-post   call FixEskkStatus()
    aug END
    " }}}3
elseif IsPlugged('im_control.vim')
    " im_control settings {{{3
    let s:has_mozc = system('ibus list-engine 2>&1 | grep -c "mozc-jp"')
    if s:has_mozc ==# '1'
        silent system('ibus engine "mozc-jp"')
        let IM_CtrlMode = 1
        inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>
        fun! IMCtrl(cmd)
            if a:cmd ==# 'On'
                let res = system('ibus engine "mozc-jp"')
            elseif a:cmd ==# 'Off'
                let res = system('ibus engine "xkb:jp::jpn"')
            endif
            silent set showtabline=2
            return ''
        endfun
        fun! ImeInfo()
            return printf('mozc%s ', IMStatus('(Lock)'))
        endfun
    endif
    "}}}3
endif
"}}}2

" input helpers {{{2
if IsPlugged('vim-easy-align')
    vmap <CR> <Plug>(EasyAlign)
endif

if IsPlugged('vim-operator-surround')
    nmap ey <Plug>(operator-surround-append)
    nmap ed <Plug>(operator-surround-delete)
    nmap er <Plug>(operator-surround-replace)
endif

if IsPlugged('deoplete.nvim')
    call deoplete#enable()
    let g:deoplete#auto_complete_delay = 0
    let g:deoplete#auto_complete_start_length = 1
    let g:deoplete#max_list = 10000
    let g:deoplete#omni_patterns = {}
    set completeopt-=preview
    if IsPlugged('neco-syntax')
        if !exists('g:necovim#completefunctions')
            let g:necovim#complete_functions = {}
        endif
        if IsPlugged('neco-vim')
            let g:necovim#complete_functions.Ref = 'ref#complete'
        endif
    endif
    if IsPlugged('deoplete-jedi')
        let g:deoplete#sources#jedi#python_path = g:python3_host_prog
    endif
endif

" for emmet.vim
let g:user_emmet_expandabbr_key        = '<C-e>e'
let g:user_emmet_expandword_key        = '<C-e>E'
let g:user_emmet_update_tag            = '<C-e>u'
let g:user_emmet_balancetaginward_key  = '<C-e>d'
let g:user_emmet_balancetagoutward_key = '<C-e>D'
let g:user_emmet_next_key              = '<C-e>n'
let g:user_emmet_prev_key              = '<C-e>N'
let g:user_emmet_imagesize_key         = '<C-e>i'
let g:user_emmet_togglecomment_key     = '<C-e>/'
let g:user_emmet_splitjointag_key      = '<C-e>j'
let g:user_emmet_removetag_key         = '<C-e>k'
let g:user_emmet_anchorizeurl_key      = '<C-e>a'
let g:user_emmet_anchorizesummary_key  = '<C-e>A'
let g:user_emmet_mergelines_key        = '<C-e>m'
let g:user_emmet_codepretty_key        = '<C-e>c'

" for vim-closetag
let g:closetag_filenames = '*'
let g:closetag_emptyTags_caseSensitive = 0
let g:closetag_shortcut = '>>'
let g:closetag_close_shortcut = '/>'
"}}}2

" language support, appearance {{{2
let g:tcomment_mapleader1 = '<C-/>'
let g:tcomment_mapleader2 = '<C-/>'

let g:polyglot_disabled = ['markdown']

if IsPlugged('vim-markdown')
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_override_foldtext = 0
    let g:vim_markdown_conceal = 0
endif

let g:LanguageClient_serverCommands = {
    \ 'haskell': ['hie-wrapper', '--lsp'],
    \ }
let g:LanguageClient_rootMarkers = { 
    \ 'haskell': ['stack.yaml'],
    \ 'python':  ['Pipfile'],
    \ }
nnoremap <silent> <F5> :<C-u>call LanguageClient_contextMenu()<CR>

if IsPlugged('nim.vim')
    fun! JumpToDef()
        if exists("*GotoDefinition_" . &filetype)
            call GotoDefinition_{&filetype}()
        endif
    endfun
    noremap <M-g> :<C-u>call JumpToDef()<CR>
    inoremap <M-g> <Esc>:call JumpTodDef()<CR>wi
endif

if IsPlugged('ale')
    let g:ale_echo_msg_format = '[%linter%]%s'
    let g:ale_linters = { 
        \ 'gitcommit': [ 'write-good' ],
        \ 'haskell': [ 'stack-ghc-mod', 'hlint' ],
        \ }
    if IsPlugged('lightline-ale')
        let g:lightline#ale#indicator_error    = 'E:'
        let g:lightline#ale#indicator_warnings = 'W:'
    endif
endif

" for indentLine
let g:indentLine_char = '|'
let g:indentLine_fileTypeExclude = ['help']
let g:indentLine_bufNameExeclude  = ['!.*', 'term:.*']
"}}}2

" utilities {{{2
" for open-browser and previm
let g:netrw_nogx = 1
let g:previm_enable_realtime = 1

" for split-term
let g:disable_key_mappings = 1

if IsPlugged('vim-quickrun')
    nnoremap <F9> :<C-u>QuickRun
    if IsPlugged('wandbox-vim')
        nnoremap <silent><C-F9> <C-u>:QuickRun --runner wandbox<CR>
    endif
endif

if IsPlugged('vim-devicons')
    com! UseDevicons  call ToggleDevicons(1)
    com! HideDevicons call ToggleDevicons(0)
    fun! ToggleDevicons(value)
        let g:webdevicons_enable = a:value
        let g:webdevicons_enable_nerdtree = 0
        if exists('g:loaded_webdevicons')
            silent call webdevicons#refresh()
        endif
    endfun
    if !exists('g:loaded_webdevicons')
        silent HideDevicons
    endif
endif

" for winresizer
let g:winresizer_vert_resize  = 2
let g:winresizer_horiz_resize = 2

" for quickrun
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
      \ 'runner': 'vimproc',
      \ 'outputter': 'error',
      \ 'outputter/error/success': 'buffer',
      \ 'outputter/error/error': 'quickfix',
      \ 'outputter/buffer/sprit': 'vertical',
      \ 'outputter/buffer/close_on_empty': 1,
      \ }
"}}}2

" launchers {{{2
if IsPlugged('denite.nvim')
" denite settings {{{3
    " Define keymaps to run denite command {{{4
    nnoremap          <Space>,  :<C-u>Denite
    nnoremap <silent> <Space>b  :<C-u>Denite buffer<CR>
    nnoremap <silent> <Space>B  :<C-u>Denite buffer -buffer-name=file<CR>
    nnoremap <silent> <Space>f  :<C-u>Denite file/rec<CR>
    nnoremap <silent> <Space>g  :<C-u>Denite grep<CR>
    nnoremap <silent> <Space>h  :<C-u>Denite history<CR>
    nnoremap <silent> <Space>m  :<C-u>Denite file/old<CR>
    nnoremap <silent> <Space>p  :<C-u>Denite file/rec/git<CR>
    nnoremap <silent> <Space>ss :<C-u>Denite line<CR>
    nnoremap <silent> <Space>sw :<C-u>DeniteWithCursorWord line<CR>
    nnoremap <silent> <Space>y  :<C-u>Denite neoyank<CR>
    "}}}4

    " Change mappings on denite {{{4
    call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
    call denite#custom#map('insert', '<C-a>', '<Home>')
    call denite#custom#map('insert', '<C-e>', '<End>')
    call denite#custom#map('insert', '<C-f>', '<Right>')
    call denite#custom#map('insert', '<C-b>', '<Left>')
    "}}}4

    " Change search options {{{4
    " - Change matchers
    call denite#custom#source(
        \ 'file/old', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
    if IsPlugged('cpsm')
        call denite#custom#source(
            \ 'file/rec', 'matchers', ['matcher/cpsm'])
    endif

    " - Change sorters.
    call denite#custom#source(
        \ 'file/rec', 'sorters', ['sorter/sublime'])
    "}}}4

    " Add custom menus {{{4
    let s:menus = {}
    let s:menus.fish = {
        \ 'description': 'Edit your import fish configuration'
        \ }
    let s:menus.fish.file_candidates = [
        \ ['config', '~/.config/fish/config.fish']
        \ ]
    call denite#custom#var('menu', 'menus', s:menus)
    "}}}4

    " Add alt-grep commands {{{4
    if executable('rg')
        call denite#custom#var('file/rec', 'command',
            \ ['rg', '--files', '--glob', '!.git'])
        call denite#custom#var('grep', 'command', ['rg'])
        call denite#custom#var('grep', 'default_opts',
            \ ['--vimgrep', '--no-heading'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'final_opts', [])
    elseif executable('pt')
        call denite#custom#var('file/rec', 'command',
            \ ['pt', '--follow', '--nocolor', '--nogroup',
            \  (has('win32') ? '-g:' : '-g='), ''])
        call denite#custom#var('grep', 'command', ['pt'])
        call denite#custom#var('grep', 'default_opts',
            \ ['--nogroup', '--nocolor', '--smart-case'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'pattern_opt', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'final_opts', [])
    elseif executable('ag')
        call denite#custom#var('file/rec', 'command',
            \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
        call denite#custom#var('grep', 'command', ['ag'])
        call denite#custom#var('grep', 'default_opts',
            \ ['-i', '--vimgrep'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'pattern_opt', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'final_opts', [])
    elseif executable('ack')
        call denite#custom#var('grep', 'command', ['ack'])
        call denite#custom#var('grep', 'default_opts',
            \ ['--ackrc', $HOME.'/.ackrc', '-H',
            \  '--nopager', '--nocolor', '--nogroup', '--column'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'pattern_opt', ['--match'])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'final_opts', [])
    endif
    "}}}4

    " Define alias {{{4
    call denite#custom#alias('source', 'file/rec/git', 'file/rec')
    call denite#custom#var('file/rec/git', 'command',
        \ ['git', 'ls-files', '-co', '--exclude-standard'])

    call denite#custom#alias('source', 'file/rec/py', 'file/rec')
    call denite#custom#var('file/rec/py', 'command', ['scantree.py'])
    "}}}4

    " Change appearance {{{4
    hi link DeniteMatchedChar Search
    hi link DeniteSearch Search
    call denite#custom#option('default', {
        \ 'auto_resize': v:true,
        \ 'highlight_matched_char': 'DeniteMatchedChar',
        \ 'highlight_mode_insert': 'DeniteSearch',
        \ 'prompt': '>',
        \ 'smartcase': v:true,
        \ 'winheight': '10'
        \})
    if IsPlugged('lightline.vim')
        call denite#custom#option('default', 'statusline', v:false)
    endif
    "}}}4

    " Change ignore_globs {{{4
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/', '.ropeproject/', '__pycache__/',
        \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/',
        \   '*.exe', '*.jpg', '*.jpeg', '*.png', '*~', '*.bak' ])
    "}}}4
"}}}3
elseif IsPlugged('ctrlp.vim')
" ctrlp settings {{{3
    let g:ctrlp_map = '<Nop>'
    nnoremap <silent> <Space>, :<C-u>CtrlP
    nnoremap <silent> <Space>b :<C-u>CtrlPBuffer<CR>
    nnoremap <silent> <Space>f :<C-u>CtrlPFiler<CR>
    nnoremap <silent> <Space>F :<C-u>CtrlP<CR>
    nnoremap <silent> <Space>m :<C-u>CtrlPMRU<CR>
    nnoremap <silent> <Space>u :<C-u>CtrlPUndo<CR>
    nnoremap <silent> <Space>y :<C-u>CtrlPRegister<CR>
    let g:ctrlp_max_depth = 4
    let g:ctrlp_lazy_update = 100
    let g:ctrlp_types = ['buf', 'mru', 'fil', 'undo', 'register']
    let g:ctrlp_open_muliple_files = 'ij'
    let g:ctrlp_cache_dir = s:base.'/'.s:app.'/ctrlp_cache'
    let g:ctrlp_custom_ignore = {
                \ 'dir':  '\v[\/]\.(git|hg|svn)$',
                \ 'file': '\v\.(exe|so|dll|png|jpeg|jpg|pdf)$'
                \ }
    if executable('rg')
        set grepprg=rg\ --color=never
        let g:ctrlp_clear_cache_on_exit = 1
        let g:ctrlp_user_command = 'rg %s --files --color=never -g ""'
        let g:ctrlp_use_caching = 0
    elseif executable('ag')
        set grepprg=ag\ --nocolor\ --nogroup
        let g:ctrlp_clear_cache_on_exit = 1
        let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup -g ""'
    endif
    if IsPlugged('cpsm')
        let g:ctrlp_match_func = { 'match': 'cpsm#CtrlPMatch' }
    endif
    "}}}3
endif
"}}}2

" lightline {{{2
fun! CustomLightlineMode()
    if &ft == 'denite'
        let l:raw = substitute(denite#get_status_mode(), '\v[- ]', "", 'g')
        call lightline#link(tolower(l:raw[0]))
        return 'Denite'
    else
        return lightline#mode()
    endif
endfun
let g:lightline = {
      \   'active': {
      \     'left': [ [ 'mode', 'paste' ], [ 'linter_warnings', 'linter_errors', 'filename', 'modified' ] ],
      \     'right': [ [ 'lineinfo' ] ]
      \   },
      \   'inactive': {
      \     'left': [ [ 'fnamewithbufnum' ] ],
      \     'right': [ [ 'lineinfo' ] ]
      \   },
      \   'component': {
      \     'filename': '%t', 'modified': '%M', 'fnamewithbufnum': '%n %t',
      \     'paste': '%{&paste?"PASTE":""}', 'readonly': '%R', 'lineinfo': '%3l:%-2v',
      \   },
      \   'component_visible_condition': {
      \     'modified': '&modified||!&modifiable', 'readonly': '&readonly', 'paste': '&paste',
      \   },
      \   'component_function': {
      \     'mode': 'CustomLightlineMode'
      \   },
      \   'component_expand': {
      \     'linter_warnings': 'lightline#ale#warnings',
      \     'linter_errors': 'lightline#ale#errors',
      \   },
      \   'component_type': {
      \     'linter_warnings': 'warning', 'linter_errors': 'error',
      \   },
      \   'tab_component_function': {
      \     'filename': 'lightline#tab#filename',
      \     'modified': 'lightline#tab#modified',
      \     'readonly': 'lightline#tab#readonly',
      \   },
      \   'mode_map': {
      \     'n': 'Normal', 'i': 'Insert', 'R': 'Replace', 'v': 'Visual', 'V': 'V-Line', "\<C-v>": 'V-Block',
      \     'c': 'Command', 's': 'Select', 'S': 'S-Line', "\<C-s>": 'S-Block', 't': 'Terminal',
      \   },
      \   'enable': { 'statusline': 1, 'tabline': 0 },
      \   '_mode_': {
      \     'n': 'normal', 'i': 'insert', 'R': 'replace', 'v': 'visual', 'V': 'visual', "\<C-v>": 'visual',
      \     'c': 'command', 's': 'select', 'S': 'select', "\<C-s>": 'select', 't': 'terminal'
      \   },
      \   'mode_fallback': { 'replace': 'insert', 'terminal': 'insert', 'select': 'visual' },
      \ }
"}}}2

"}}}1

" colorscheme settings {{{1
set background=dark
if has('unix') && !has('nvim')
    aug ModifyVimStyle
        au!
        au ColorScheme * hi CursorLine cterm=none
        au ColorScheme * hi Normal  ctermbg=none
        au ColorScheme * hi NonText ctermbg=none
        au ColorScheme * hi LineNr  ctermbg=none
        au ColorScheme * hi Folded  ctermbg=none
        au ColorScheme * hi EndOfBuffer ctermfg=235 ctermbg=none
        au ColorScheme * hi StatusLineNC cterm=Italic gui=Italic
    aug END
end
if IsPlugged('onedark.vim')
    let g:lightline.colorscheme = 'onedark'
    let g:onedark#colors = onedark#GetColors()
    let g:onedark#extend = {
        \ 'gray': { 'cterm16': '0', 'cterm': '234', 'gui': '#21252B' }
        \}
    aug OverrideOnedark
        au!
        au ColorScheme * call onedark#set_highlight('EndOfBuffer', {
            \ 'fg': g:onedark#colors.black })
        au ColorScheme * call onedark#set_highlight('Structure', {
            \ 'fg': g:onedark#colors.purple })
        au ColorScheme * call onedark#set_highlight('Operator', {
            \ 'fg': g:onedark#colors.white })
        au ColorScheme * call onedark#set_highlight('StorageClass', {
            \ 'fg': g:onedark#colors.purple })
        au ColorScheme * call onedark#set_highlight('Constant', {
            \ 'fg': g:onedark#colors.dark_yellow })
        au ColorScheme * call onedark#set_highlight('StatusLineNC', {
            \ 'fg': g:onedark#colors.comment_grey,
            \ 'bg': g:onedark#colors.cursor_grey })
        au ColorScheme * call onedark#set_highlight('StatusLineTerm', {
            \ 'fg': g:onedark#colors.white,
            \ 'bg': g:onedark#colors.cursor_grey })
        au ColorScheme * call onedark#set_highlight('StatusLineTermNC', {
            \ 'fg': g:onedark#colors.comment_grey,
            \ 'bg': g:onedark#colors.cursor_grey })
        au ColorScheme * call onedark#set_highlight('TablineSel', {
            \ 'bg': g:onedark#extend.gray })
        au ColorScheme * call onedark#set_highlight('TablineFill', {
            \ 'bg': g:onedark#extend.gray })
        au ColorScheme * call onedark#set_highlight('Cursor', {
            \ 'bg': g:onedark#colors.blue })
        au ColorScheme * call onedark#set_highlight('fishKeyword', {
            \ 'fg': g:onedark#colors.purple })
        au ColorScheme * call onedark#set_highlight('luaBraces', {
            \ 'fg': g:onedark#colors.white })
        au ColorScheme * call onedark#set_highlight('luaFuncCall', {
            \ 'fg': g:onedark#colors.blue })
        au ColorScheme * call onedark#set_highlight('luaFuncKeyword', {
            \ 'fg': g:onedark#colors.purple })
        au ColorScheme * call onedark#set_highlight('luaLocal', {
            \ 'fg': g:onedark#colors.purple })
        au ColorScheme * call onedark#set_highlight('luaStringSpecial', {
            \ 'fg': g:onedark#colors.cyan })
        au ColorScheme * call onedark#set_highlight('luaSpecialTable', {
            \ 'fg': g:onedark#colors.yellow })
        au ColorScheme * call onedark#set_highlight('luaSpecialValue', {
            \ 'fg': g:onedark#colors.purple })
        au ColorScheme * call onedark#set_highlight('shQuote', {
            \ 'fg': g:onedark#colors.green })
        au ColorScheme * call onedark#set_highlight('mkdURL', {
            \ 'fg': g:onedark#colors.cyan })
        au ColorScheme * call onedark#set_highlight('DeniteMatchedChar', {
            \ 'fg': g:onedark#colors.red })
        au ColorScheme * call onedark#set_highlight('DeniteSearch', {
            \ 'bg': g:onedark#colors.comment_grey })
    aug END

    " for indentLine
    let g:indentLine_color_term = g:onedark#colors.comment_grey.cterm
    let g:indentLine_color_gui  = g:onedark#colors.comment_grey.gui
    let g:indentLine_color_tty_light = g:onedark#colors.comment_grey.cterm16
    let g:indentLine_color_tty_dark  = g:onedark#colors.comment_grey.cterm16

    if IsPlugged('vim-markdown')
        aug VimMarkdownColor
            au!
            au FileType markdown exec 'hi htmlH1'
                \.' ctermfg='. g:onedark#colors.red.cterm
                \.' guifg='  . g:onedark#colors.red.gui
        aug END
    endif

    " for eskk.vim
    let g:eskk#cursor_color = {
        \ 'ascii':  g:onedark#colors.yellow.gui,
        \ 'hira':   g:onedark#colors.red.gui,
        \ 'kata':   g:onedark#colors.green.gui,
        \ 'abbrev': g:onedark#colors.purple.gui,
        \ 'zenei':  g:onedark#colors.yellow.gui
        \}

    color onedark
endif
"}}}1

" settings for some terminal emulators {{{1
if !has('gui_running')
    if &term == 'xterm-256color'
        let &t_ti.="\e[0 q"
        let &t_SI.="\e[5 q"
        let &t_EI.="\e[1 q"
        let &t_te.="\e[0 q"
    elseif &term == 'linux'
        let &t_Co=16
    elseif isdirectory('/data/data/com.termux')
        let &t_ti.="\e[1 q"
        let &t_SI.="\e[5 q"
        let &t_EI.="\e[1 q"
        let &t_te.="\e[0 q"
    endif
endif
"}}}1
